#check Eq;
#check refl;
#check subst;

let sym: forall(@A: Type, @a: A, @b: A) -> Eq(a, b) -> Eq(b, a)
    = fun(a_eq_b) => do {
        let p = fun(x) => Eq(@A, x, a);
        let p_a:  p(a) = refl(a);
        let goal: p(b) = subst(@A, @p, @a, @b, a_eq_b, p_a);
        goal
    };

#check sym;
#eval sym;

let trans: forall(@A: Type, @a: A, @b: A, @c: A) -> Eq(a, b) -> Eq(b, c) -> Eq(a, c)
    = fun(a_eq_b, b_eq_c) => do {
        let p = fun(x) => Eq(@A, a, x);
        let p_b: p(b) = a_eq_b;
        let goal: p(c) = subst(@A, @p, @b, @c, b_eq_c, p_b);
        goal
    };

#check trans;
#eval trans;

let cong: forall(@A: Type, @B: Type, @a: A, @b: A, f: A -> B) -> Eq(a, b) -> Eq(f(a), f(b))
    = fun(f, a_eq_b) => do {
        let p = fun(x) => Eq(@B, f(a), f(x));
        let p_a:  p(a) = refl(f(a));
        let goal: p(b) = subst(@A, @p, @a, @b, a_eq_b, p_a);
        goal
    };

#check cong;
#eval cong;

let cong-app: forall(@A: Type, @B: Type, a: A, f: A -> B, g: A -> B) -> Eq(f, g) -> Eq(f(a), g(a))
    = fun(a, f, g, f_eq_g) => do {
        let p = fun(x : A -> B) => Eq(@B, f(a), x(a));
        let p_f: p(f) = refl(_);
        let goal = subst(@(A -> B), @p, @f, @g, f_eq_g, p_f);
        goal
    };

#check cong-app;
#eval cong-app;

let not = fun(b) => if b then false else true;
#check not;

let not-true-is-false: Eq(not(true), false) = refl(_);
#check not-true-is-false;
#eval not-true-is-false;

let not-false-is-true: Eq(not(false), true) = refl(_);
#check not-false-is-true;
#eval not-false-is-true;
