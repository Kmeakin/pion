// TODO: record field shorthand
let fst = fun(A: Type, B: Type, p: {x: A, y: B}) => match p {
    {x=x, y=y} => x,
};
let snd = fun(A: Type, B: Type, p: {x: A, y: B}) => match p {
    {x=x, y=y} => y,
};

#show fst;
#show snd;


// Examples of "strong pairs" from pi-forall

// fst : (A:Type) → (B : A → Type) → (p : { x2 : A | B x2 }) → A
// fst = λA B p. let (x,y) = p in x
let dfst = fun(A: Type, B: A -> Type, p: {x: A, y: B(x)}) => match p {
    {x=x, y=y} => x,
};

// snd : (A:Type) → (B : A → Type) → (p : { x2 : A | B x2 }) → B (fst A B p)
// snd = λA B p. let (x,y) = p in y
let dsnd = fun(A: Type, B: A -> Type, p: {x: A, y: B(x)}) => match p {
    {x=x, y=y} => y,
};

#show dfst;
#show dsnd;
