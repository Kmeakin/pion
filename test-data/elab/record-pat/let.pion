let f0 = fun (r : {}) => do {
    let {} = r;
};
#show f0;

let f1 = fun (r : {x : Int }) => do {
    let {x = a} = r;
    a
};
#show f1;

let f2 = fun (r : {x : Int,y : Bool }) => do {
    let {x = a, y = b } = r;
    b
};
#show f2;

// FIXME: fails if pattern is not annotated
let f3: forall(r: {A: Type, a: A}) -> r.A = fun (r : {A : Type, a: A }) => do {
    let {A = B, a = b} : {A: Type, a: A} = r;
    b
};
#show f3;

// Examples of "strong pairs" from pi-forall

// fst : (A:Type) → (B : A → Type) → (p : { x2 : A | B x2 }) → A
// fst = λA B p. let (x,y) = p in x
let dfst = fun(A: Type, B: A -> Type, p: {x: A, y: B(x)}) => do {
   let {x=x, y=y} : {x: A, y: B(x)} = p;
   x
};

// snd : (A:Type) → (B : A → Type) → (p : { x2 : A | B x2 }) → B (fst A B p)
// snd = λA B p. let (x,y) = p in y
let dsnd = fun(A: Type, B: A -> Type, p: {x: A, y: B(x)}) => do {
   let {x=x, y=y} : {x: A, y: B(x)} = p;
   y
};

#show dfst;
#show dsnd;

